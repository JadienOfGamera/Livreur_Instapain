import bread_db from "../db/bread_db.json" with { type: "json" };
const axios = require('axios');
const { SlashCommandBuilder, resolveGuildTemplateCode } = require('discord.js');

// La collection de PAINs :D
const breads = ['Pain', 'niaP', 'Chasseur', 'Ruche', 'Kyrofortant', 'Gigotant', 'Cosmique'];

module.exports = {
    data: new SlashCommandBuilder()
        .setName('commande')
        .setDescription('Commande un pain ü•ñ')
        .addStringOption(option =>
            option
                .setName('pain')
                .setDescription('Commande un pain en particulier')
                .setRequired(false)
                .addChoices(
                    ...breads.map(bread => ({ name: bread, value: bread })) // Liste les pains possibles
                )
        )
        .addUserOption(option =>
            option
                .setName('cible')
                .setDescription('Commande un pain pour quelqu\'un, la chance ! :D')
                .setRequired(false)
        ),
    async execute(interaction) {
        const bread = interaction.options.getString('pain');
        const cible = interaction.options.getUser('cible');

        //Si pas de pain particulier
        const chosenBread = bread || breads[Math.floor(Math.random() * breads.length)];

        let response;
        switch (chosenBread) {
            case 'Pain':
                response = `Parfois, un classico-classique est tout ce qu'il faut ! Un **${chosenBread}** pour vous, simple, mais toujours efficace! üòÅ`;
                break;
            case 'niaP':
                response = `¬°«ù…î…ê…î·¥â…ü…ü«ù s…πno…æno á s·¥â…ê…Ø '«ùld…Ø·¥âs 'sno å …πnod **${chosenBread}** u‚à© ¬°  án…ê…ü l·¥â,nb «ù…î  áno á  á«ù «ùnb·¥âss…êl…î-o…î·¥âss…êl…î un 's·¥âo…ü…π…ê‘Ä..... Oula, j'ai la t√™te qui tourne moi...!`;
                break;
            case 'Chasseur':
                response = `Je vois que vous avez besoin d'√©nergie vous... Allez, un petit **${chosenBread}** pour vous ! Ne vous plaignez pas d'avoir faim apr√®s ü´°`;
                break;
            case 'Ruche':
                response = `Une **${chosenBread}** pour vous! Sucr√© et plein de miel, un vrai r√©gal pour les gourmands! Il ne devrait plus avoir d'abeilles, mais au pire, √ßa ferra des prot√©ines... !\n\n\n(j'plaisante)`;
                break;
            case 'Kyrofortant':
                response = `Oh, un **${chosenBread}**? Aucun soucis ! Vous allez appr√©cier son confort ^^.\nNe vous endormez pas dessus par contre!`;
                break;
            case 'Gigotant':
                response = `Oh oh... Vous √™tes du genre t√©m√©raire on dirait... Pas pour me d√©plaire (:\nLe **${chosenBread}** va vous donner du fil √† retordre, mais je sais que vous allez en triompher!`;
                break;
            case 'Cosmique':
                response = `Un **${chosenBread}** pour vous! Appr√©ciez sa construction soign√©e du plus beau pain de Instapain, pr√™t √† conqu√©rir votre app√©tit!`;
                break;
            default:
                response = `Que c\'est √©tonnant... Je ne connais pas ce pain... Devrais-je en parler √† Certos? ü§î`;
                break;
        }

        // Ajout du message pour une cible si pr√©cis√©e
        if (cible.id === '<@Livreur Instapain') {
            response += "EHEHEHEHEH\n";
        }
        else if (cible) {
            response += `\nCe pain est destin√© √† <@${cible.id}>. Quelle gentillesse! J'en suis presque jaloux...! ü•ñ`;
        }

        try {
            await interaction.reply(response);
        } catch (error) {
            console.error('Erreur lors de la commande du pain :', error);
            await interaction.reply({
                content: 'Que c\'est √©tonnant... Je ne connais pas ce pain... Devrais-je en parler √† Certos? ü§î',
                ephemeral: true,
            });
        }
    },
};